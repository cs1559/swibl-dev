<?php
/**
 * @version 		$Id: divisiondao.class.php 441 2012-10-20 22:16:19Z cs1559 $
 * @package 		JLeague
 * @subpackage 		Data Access Objects
 * @copyright 		(C) 2006-2012 Chris Strieter, Firestorm Technologies, LLC
 * @license			GNU/GPL, see LICENSE.php
 */

// Check to ensure this file is included in Joomla!
defined('_JEXEC') or die( 'Restricted access' );

// require_once(JLEAGUE_CLASSES_PATH . DS. 'dao' . DS. 'basedao.class.php');
// require_once(JLEAGUE_CLASSES_PATH . DS. 'objects' . DS. 'division.class.php');

class JLDivisionDAO extends fsBaseDAO {
	
	var $tablename = '#__jleague_division';
	
	protected function __construct() {
		parent::__construct();
	}
	
	function getInstance() {
		static $instance;
		if (!is_object( $instance )) {
			$instance = new JLDivisionDAO();
		}
		$db = mFactory::getDBO();
		$instance->setDatabase($db);
		return $instance;
	}		
	/**
	 * 
	 * This function will insert a row into the DIVISION table.
	 *
	 * @param JLDivision
	 * @return boolean
	 */
   	function insert(JLDivision $obj) {
		$otherdivs = $this->reformatOtherDivisions($obj);
		$query = 'INSERT INTO ' .$this->getNameQuote( $this->tablename  ) . ' (id, name, season, league_id,sort_order, properties,agegroup,primarycontactid,secondarycontactid,notes,games,published) '
			. ' VALUES (0,'
			. '"' . $obj->getName() . '",' 
			. '"' . $obj->getSeasonId() . '",'
			. '"' . $obj->getLeagueId(). '",'
			. '"' . $obj->getOrder() . '",'
			. '"' . $obj->getFormattedProperties() . '",'									
			. '"' . $obj->getAgeGroup() . '",'
			. '"' . $obj->getPrimaryContactId() . '",'									
			. '"' . $obj->getSecondaryContactId() . '",'
			. '"' . $obj->getNotes() . '",'
			. '"' . $obj->getNumberOfGames() . '",'															
			. $obj->getPublished() . ')';
		return $this->_insertRow($query);			
    }
    
    /**
     * This function will enable someone to delete a row from the LEAGUE table.
     *
     * @param JLLeague $league
     * @return boolean
     */
    function update(JLDivision $obj) {

		$otherdivs = $this->reformatOtherDivisions($obj);

		$query = 'update ' .$this->getNameQuote( $this->tablename  ) . ' set '
			. ' name = "' . $obj->getName(). '", '
			. ' season = "' . $obj->getSeasonId(). '", '
			. ' league_id = "' . $obj->getLeagueId(). '", '
			. ' sort_order = "' . $obj->getOrder(). '", '			
			. ' properties = "' . $obj->getFormattedProperties(). '", '
			. ' agegroup = "' . $obj->getAgeGroup(). '", '			
			. ' primarycontactid = "' . $obj->getPrimaryContactId(). '", '			
			. ' secondarycontactid = "' . $obj->getSecondaryContactId(). '", '	
			. ' leagueplaydivisions = "' . $otherdivs . '", '		
			. ' notes = "' . $obj->getNotes() . '", '
			. ' games = "' . $obj->getNumberOfGames() . '", '							
			. ' published = ' . $obj->getPublished()
			. ' where id = ' . $obj->getId();
		return $this->_updateRow($query);		
    }

    /**
     * This function will reformat the array of other divisions into a comma seperated
     * list.  The value is stored in a 1,3,5 type format.
     *
     * @param array $obj
     * @return string
     */
    private function reformatOtherDivisions($obj) {
    	$otherdivs = $obj->getOtherDivisionsInConferencePlay();
    	$temparray = array();
    	foreach ($otherdivs as $div) {
    		$temparray[] = $div->getId();
    	}
		$otherdivs = implode(",",$temparray);
		return $otherdivs;    	
    }
    /*
	
    function getTotalGamesForSeason($id) {
    	$iid = (int) $id;
    	$query = 'SELECT count(*) as total_games FROM #__jleague_scores WHERE gamestatus = 'C' and season = ' . $iid;
    	$rows = $this->_execute($query);
    	if (is_array($rows)) {
    		return $rows[0]->total_games;
    	}
    	return 0;
    }
        
    function getTotalLeagueGamesForSeason($id) {
    	$iid = (int) $id;
    	$query = 'SELECT count(*) as total_games FROM #__jleague_scores WHERE conference_game = "Y" and gamestatus = 'C' and season = ' . $iid;
    	$rows = $this->_execute($query);
    	if (is_array($rows)) {
    		return $rows[0]->total_games;
    	}
    	return 0;
    }
        
    function getTotalTeamsForSeason($id) {
    	$iid = (int) $id;
    	$query = 'SELECT distinct team_id FROM #__jleague_divmap WHERE season = ' . $iid;
    	$rows = $this->_execute($query); 
    	if (is_array($rows)) {
    		return count($rows);
    	}
    	return 0;
    }    
*/

    /**
     * This function will return an array of Division objects for the current season excluding
     * the division that is passed as an argument.
     *
     * @param int $season
     * @param int $div
     * @return array
     */
    function getOtherDivisions($season,$div) {
		$sid = (int) $season;
		$did = (int) $div;
		$query = "select * from " . $this->tablename . " where season = " . $season . " and id <> " . $div . " order by sort_order, agegroup, name";
		return parent::_getRows($query);    	
    }
    
    /**
     * This function will return an array of division objects that are within a given age group (or groups).
     *
     * @param int $season
     * @param array $agegroups
     * @return array
     */
    function getDivisionsWithinAgeGroup($season, array $agegroups = null) {
    	if ($agegroups == null) {
    		$query = "select * from " . $this->tablename . " where season = " . $season . " order by sort_order, agegroup, name";
    	} else {
    		$groups = implode(",", $agegroups);
    	   	$query = "select * from " . $this->tablename . " where season = " . $season . " and agegroup in (" . $groups . ")  order by sort_order, agegroup, name";
    	}
		return parent::_getRows($query);    	
    	
    }
    
    /**
     * This function will return a list of contact information for teams. 
     *
     * @param int $divid
     * @return array
     */
    function getTeamConactsWithinDivision($divid) {
    	$query = "select sort_order,teamname, division_id, divname, teamid, name, email, phone, role, primarycontact, src
				from
				(
					SELECT teamid as teamid, t.name as teamname, dm.division_id, d.name as divname, d.sort_order, tc.name, tc.email, tc.phone, role, primarycontact, 'contacts' as src  
						from jos_jleague_teamcontacts as tc, jos_jleague_divmap as dm, jos_jleague_division as d, jos_jleague_teams t
					where tc.teamid = dm.team_id
						and dm.division_id = " . $divid . "
						and dm.division_id = d.id
						and dm.team_id = t.id
					UNION
					SELECT t.id as teamid, t.name as teamname, dm.division_id,  d.name as divname, d.sort_order, coachname as name, coachemail as email, coachphone as phone, 'coach' as role, 0 as primarycontact, 'teams' as src 
						from jos_jleague_teams as t, jos_jleague_divmap as dm, jos_jleague_division as d
					where  dm.division_id = d.id
					    and dm.team_id = t.id
						and dm.division_id = " . $divid . "
						  and concat_ws('-',t.id,coachemail) not in (
							select concat_ws('-',teamid,email) from jos_jleague_teamcontacts
						)				
				) as tmp1
				where length(email)>0
				and LOCATE(';', email) <= 0
				and LOCATE('@', email) > 0
				and LOCATE(' or ', email) <= 0
				and LOCATE('/', email) <= 0
				order by sort_order, divname, teamname, primarycontact desc";
    	return parent::_execute($query);
    }
    
	/**
	 * This will map the the database row to the Division Object
	 *
	 * @param unknown_type $row
	 * @return JLDivision
	 */	
	function loadObject($row) {
// 		require_once(JLEAGUE_CLASSES_OBJECTS_PATH . DS . 'division.class.php');
// 		require_once(JLEAGUE_CLASSES_PATH . DS .'helpers'. DS . 'factory.php');
		
		$obj = new JLDivision();
		$obj->setId($row->id);
		$obj->setName($row->name);
		$obj->setSeasonId($row->season);
		$obj->setLeagueId($row->league_id);
		$obj->setOrder($row->sort_order);
		$obj->setPublished($row->published);
		$obj->setAgeGroup($row->agegroup);
		$obj->setPrimaryContactId($row->primarycontactid);
		$obj->setSecondaryContactId($row->secondarycontactid);
		$obj->setNotes($row->notes);		
		$obj->setNumberOfGames($row->games);
		
		$ldao = &JLLeagueDAO::getInstance();
		
// 		$ldao = &JLFactory::getLeagueDao();
		$sdao = &JLSeasonDAO::getInstance();
		//$cdao = &JLFactory::getContactsDao(); 

		try {
			if ($row->season > 0) {
				$season = $sdao->findById($row->season);
				$obj->setSeason($season);
			}
			if ($row->league_id > 0) {
				$league = $ldao->findById($row->league_id);
				$obj->setLeague($league);
			}
			/*
			if (!empty($row->primarycontactid)) {
				$contact1 = $cdao->findById($row->primarycontactid);
				$obj->setPrimaryContact($contact1);
			}
			if (!empty($row->secondarycontactid)) {
				$contact2 = $cdao->findById($row->secondarycontactid);
				$obj->setSecondaryContact($contact2);
			}
			*/
		} catch (Exception $e) {
			throw $e;
		}

		$obj->parseDatabaseObjectProperties($row->properties);
				
// 		$proparray = split("\n",$row->properties);
// 		for ($y=0; $y<(sizeof($proparray)); $y++) {
// 			$prop = split("=",$proparray[$y]);
// 			//TODO:  Revisit this.  This is a quick work around.  need to investigate origin of
// 			// why this $prop[1] would generate an undefined offset on the $prop array
// 			if (key_exists(1,$prop)) {
// 				$obj->addProperty($prop[0],$prop[1]);
// 			}
// 		}
		
		/*
		$totaldivs = $this->getTotalDivisionsForSeason($row->id);
		$totalteams = $this->getTotalTeamsForSeason($row->id);
		$totalgames = $this->getTotalGamesForSeason($row->id);
		$totalleaguegames = $this->getTotalLeagueGamesForSeason($row->id);
		
		$obj->setTotalDivisions($totaldivs);
		$obj->setTotalTeams($totalteams);
		$obj->setTotalGames($totalgames);
		$obj->setTotalLeagueGames($totalleaguegames);
		*/
		

		$obj->setDivisionIdsInConferencePlay($row->leagueplaydivisions);
//		if (!empty($row->leagueplaydivisions)) {
//			$otherdivkeys = explode(",",$row->leagueplaydivisions);
//			foreach ($otherdivkeys as $key => $value) {
//				$division = $ddao->findById($value);
//				$obj->addDivisionInConferencePlay($division);	
//			}
//		}		
		return $obj;
	}
	

}
